geom_line(data = df.pred, aes(time, long.m1.hat), color = "gold", size = 1)+
geom_line(data = df.pred, aes(time, long.m2.hat), color = "red4", size = 1)
p2 <- ggplot()+
geom_point(data = df, aes(time, lat), size = 3)+
geom_line(data = df.pred, aes(time, lat.m1.hat), color = "gold", size = 1)+
geom_line(data = df.pred, aes(time, lat.m2.hat), color = "red4", size = 1)
p3 <- ggplot()+
geom_point(data = df, aes(time, ele), size = 3)+
geom_line(data = df.pred, aes(time, ele.m1.hat), color = "gold", size = 1)+
geom_line(data = df.pred, aes(time, ele.m2.hat), color = "red4", size = 1)
ggarrange(p1, p2, p3, nrow = 1)
# Create data frame for plotting
df.pred2 <- df.pred %>% pivot_longer(cols = c(long.m1.hat,long.m2.hat), values_to = 'longitude', names_to = 'model') %>%
pivot_longer(cols = c(lat.m1.hat, lat.m2.hat), values_to = 'latitude', names_to = 'model2') %>%
mutate(model = substr(model, 6,7),
model2 = substr(model2, 5,6)) %>%
filter(model == model2) %>% dplyr::select(-c(ele.m1.hat, ele.m2.hat, model2))
# Visualize models
color_palette <- colorFactor(palette = "Set1", domain = df.pred2$model)
leaflet(df.pred2) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addCircleMarkers(
~longitude,
~latitude,
fillColor = ~color_palette(model),
color = ~'black', # This will set the border color the same as the fill color
radius = 3,
weight = 1,
fillOpacity = 0.8,
stroke = TRUE, # Set to TRUE to have borders on the circles
group = "Data Points"
) %>%
addLayersControl(
baseGroups = c("OSM (default)", "World Imagery"),
overlayGroups = c("Data Points"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(
position = "bottomright",
pal = color_palette,
values = ~model,
title = "Model",
opacity = 1.0
)
# Calculate speed observed data
dist <- st_distance(data$geometry[1:701], data$geometry[2:702], by_element = T)
(sum(dist)/1000)*.62 # Distance observed in km
speed <- (dist/as.numeric(diff(data$time)))*2.24
plot(df$time[-1], speed)
#Convert model coordinates to sf object
data.hat.m1 <- st_as_sf(df.pred, coords = c("long.m1.hat", "lat.m1.hat"),
crs = st_crs(data))
data.hat.m2 <- st_as_sf(df.pred, coords = c("long.m2.hat", "lat.m2.hat"),
crs = st_crs(data))
# Calculate speed m1
dist.hat.m1 <- st_distance(data.hat.m1$geometry[1:741], data.hat.m1$geometry[2:742], by_element = T)
(sum(dist.hat.m1)/1000)*.62 # Distance in km model 1
speed.hat.m1 <- (dist.hat.m1/as.numeric(diff(data.hat.m1$time)))*2.24
plot(data.hat.m1$time[-1], speed.hat.m1,xlab="Time (seconds)",ylab="Velocity (miles per hour)", main = 'Polynomial regression')
# Calculate speed m2
dist.hat.m2 <- st_distance(data.hat.m2$geometry[1:741], data.hat.m2$geometry[2:742], by_element = T)
(sum(dist.hat.m2)/1000)*.62 # Distance in km model 2
speed.hat.m2 <- (dist.hat.m2/as.numeric(diff(data.hat.m2$time)))*2.24
plot(data.hat.m2$time[-1], speed.hat.m2,xlab="Time (seconds)",ylab="Velocity (miles per hour)", main = 'Random Forest')
knitr::opts_chunk$set(echo = TRUE,
warning = F,
message = F)
library(tidyverse)
library(sf)
library(sp)
library(raster)
library(gstat)
library(randomForest)
library(raster)
library(mgcv)
library(hydroGOF)
library(ggpubr)
set.seed(123)
# Points
points <-  st_read('https://www.dropbox.com/scl/fi/5km5t8yzjqh9fltq5wz2f/soybean23map.geojson?rlkey=7k2ppf8hl9v4oq4nxvx6n2ket&st=xhmxfx42&dl=1') %>%
dplyr::select(Elevation, geometry, Time) %>%
.[sample(nrow(.), 100), ]
# There are thousands of points, so for the purpose of this activity only a few will be utilized randomly.
# Polygon
polygon <- st_read('https://www.dropbox.com/scl/fi/bxbwxmgs22yx17j2g8m3y/pol.geojson?rlkey=lx39y99fewf8qgzfh87p0ptmp&st=ngala0hj&dl=1')
ggplot()+
geom_sf(data = polygon)+
geom_sf(data = points, aes(fill = Elevation), shape = 21)+
scale_fill_viridis_c()+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))
ggplot()+
geom_histogram(data = points, aes(x = Elevation),
bins = 25,
color = 'black',
fill = 'tomato4',
alpha = .5)+
theme_bw()+
theme(panel.grid = element_blank())
# Create random points
newPoints <- st_sample(polygon, size = 10000, type = "random") %>%
as(., 'Spatial') %>%
spTransform(., CRS(proj4string(points %>% as(.,'Spatial'))))
points
krig.df <- data.frame(ele = points$Elevation,
lon = st_coordinates(points$geometry)[,1],
lat = st_coordinates(points$geometry)[,2])
krig.mod <- gam(ele ~ s(lon,lat, bs = 'gp'), data = krig.df)
newpoints.krig <-  as.data.frame(newPoints) %>%
rename("lon" = 'coords.x1',
'lat' = 'coords.x2')
newpoints.krig$ele <- predict(krig.mod, newpoints.krig, type = 'response')
df.rf <- as.data.frame(points)
df.rf$lon <- st_coordinates(points)[,1]
df.rf$lat <- st_coordinates(points)[,2]
rf.fit <- randomForest(Elevation ~ lon + lat, data=df.rf, ntree=500, importance=TRUE)
plot(rf.fit)
newPoints.rf <- as.data.frame(newPoints) %>%
rename("lon" = 'coords.x1',
'lat' = 'coords.x2')
pred.rf <- predict(rf.fit, newPoints.rf) %>% as.data.frame()
newPoints.rf$ele <- pred.rf$.
krig.sf <- st_as_sf(newpoints.krig, coords = c('lon','lat'), crs = st_crs(points))
ggplot()+
geom_sf(data = krig.sf, aes(fill = ele),
shape = 21)+
geom_sf(data = polygon, fill = NA, color = 'black')+
geom_sf(data = krig.sf %>% filter(ele == max(ele)), fill = 'darkred', shape = 22,
size = 3)+
scale_fill_viridis_c()+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))
rf.sf <- st_as_sf(newPoints.rf, coords = c('lon','lat'), crs = st_crs(points))
ggplot()+
geom_sf(data = rf.sf, aes(fill = ele),
shape = 21)+
geom_sf(data = polygon, fill = NA, color = 'black')+
geom_sf(data = krig.sf %>% filter(ele == max(ele)), fill = 'darkred', shape = 22,
size = 3)+
scale_fill_viridis_c()+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))
# Obtain new points at the same area for model testing.
newpoints.test <- st_read('https://www.dropbox.com/scl/fi/5km5t8yzjqh9fltq5wz2f/soybean23map.geojson?rlkey=7k2ppf8hl9v4oq4nxvx6n2ket&st=xhmxfx42&dl=1') %>%
dplyr::select(Elevation, geometry, Time) %>%
.[sample(nrow(.), 100), ]
# Plot training and testing datasets
ggplot()+
geom_sf(data = polygon)+
geom_sf(data = points, shape = 21, fill = 'gold')+
geom_sf(data = newpoints.test, shape = 22, fill = 'pink4')+
scale_fill_viridis_c()+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))
# Predictions
test.df <- data.frame(ele = newpoints.test$Elevation,
lon = st_coordinates(newpoints.test$geometry)[,1],
lat = st_coordinates(newpoints.test$geometry)[,2])
test.df$pred.krig <- predict(krig.mod, newdata = test.df, type = 'response')
test.df$pred.rf <- predict(rf.fit, newdata = test.df)
rmse.krig <- rmse(test.df$ele, as.numeric(test.df$pred.krig))
mae.krig <- mae(test.df$ele, as.numeric(test.df$pred.krig))
rmse.rf <- rmse(test.df$ele, as.numeric(test.df$pred.rf))
mae.rf <- mae(test.df$ele, as.numeric(test.df$pred.rf))
#Kriging metrics
krigingMetrics <- test.df %>%
ggplot()+
geom_point(aes(pred.krig, ele), fill = 'purple4', color = 'black', shape = 21, size = 2,
alpha = .7)+
geom_abline(slope = 1)+
#scale_y_continuous(limits = c(0,90), breaks = seq(0,100, 20))+
#scale_x_continuous(limits = c(0,90), breaks = seq(0,100, 20))+
theme_bw()+
labs(title = 'Kriging', x = 'Predicted', y = 'Observed')+
annotate('text', label = paste0('RMSE: ', round(rmse.krig,1)), x = 65, y = 50)+
annotate('text', label = paste0('MAE: ', round(mae.krig,1)), x = 65, y = 48)+
theme(panel.grid = element_blank(),
aspect.ratio = 1,
text = element_text(size = 12)
)
#Rf metrics
rfMetrics <- test.df %>%
ggplot()+
geom_point(aes(pred.rf, ele), fill = 'purple4', color = 'black', shape = 21, size = 2,
alpha = .7)+
geom_abline(slope = 1)+
#scale_y_continuous(limits = c(0,90), breaks = seq(0,100, 20))+
#scale_x_continuous(limits = c(0,90), breaks = seq(0,100, 20))+
theme_bw()+
labs(title = 'Random Forest', x = 'Predicted', y = 'Observed')+
annotate('text', label = paste0('RMSE: ', round(rmse.rf,1)), x = 65, y = 50)+
annotate('text', label = paste0('MAE: ', round(mae.rf,1)), x = 65, y = 48)+
theme(panel.grid = element_blank(),
aspect.ratio = 1,
text = element_text(size = 12)
)
ggarrange(krigingMetrics,rfMetrics)
knitr::opts_chunk$set(echo = TRUE,
warning = F,
message = F)
library(tidyverse)
library(raster)
library(mgcv)
library(sf)
library(hydroGOF)
library(ggpubr)
# Upload data
url <- "https://www.dropbox.com/scl/fi/9ymxt900s77uq50ca6dgc/Enders-et-al.-2018-data.csv?rlkey=0rxjwleenhgu0gvzow5p0x9xf&dl=1"
df <- read.csv(url)
df <- df[,c(2,8:10)] %>%
mutate(presence = ifelse(EGA != 0, 1, 0))# Keep only the data on bird cherry-oat aphid
# Download KS shapefile
ks <- raster::getData(name="GADM", country="USA", level=1) %>%
st_as_sf() %>%
filter(NAME_1 == 'Kansas')
df_sf <- df %>% st_as_sf(coords = c('long', 'lat'), crs = st_crs(ks))
url.nlcd <- "https://www.dropbox.com/scl/fi/ew7yzm93aes7l8l37cn65/KS_2011_NLCD.img?rlkey=60ahyvxhq18gt0yr47tuq5fig&dl=1"
rl.nlcd2011 <- raster(url.nlcd)
plot(rl.nlcd2011)
# Make raster file that contains pixels with value of 1 if grassland and
# zero if other type of land cover.
# NLCD legend can be found here: https://www.mrlc.gov/data/legends/national-land-cover-database-2011-nlcd2011-legend
rl.nlcd.grass <- rl.nlcd2011
rl.nlcd.grass[] <- ifelse(rl.nlcd.grass[]==71,1,0)
plot(rl.nlcd.grass)
pts.sample<- df
coordinates(pts.sample) =~ long + lat
proj4string(pts.sample) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Calculate percentage of land area that is grassland within 5 km of sampled location
df$grass.perc <- unlist(lapply(extract(rl.nlcd.grass,pts.sample,buffer=5000),mean))*100
hist(df$grass.perc,col="grey",main="",xlab="% grassland within \n5 km at sample location")
ggplot()+
geom_sf(data = ks)+
geom_sf(data = df_sf, shape = 21, aes(size = EGA, fill = factor(presence)))+
theme_bw()+
facet_wrap(~year, ncol = 1)
m1 <- gam(EGA ~ grass.perc + as.factor(year) + s(long,lat, bs = "gp"),
family = poisson(link = "log"), data = df)
summary(m1)
m2 <- gam(EGA ~ grass.perc + as.factor(year) + s(long,lat, bs = "gp"),
family = nb(theta = NULL,link = "log"), data = df)
summary(m2)
m3 <- gam(list(EGA ~ grass.perc + as.factor(year) + s(long,lat, bs = "gp"), ~ grass.perc + s(long,lat, bs = "gp")),
family = ziplss(), data = df)
summary(m3)
####
rl.E.y <- raster(,nrow=30,ncols=30,ext=extent(ks),crs=crs(ks))
newPoints <- data.frame(long = xyFromCell(rl.E.y,cell=1:length(rl.E.y[]))[,1],
lat = xyFromCell(rl.E.y,cell=1:length(rl.E.y[]))[,2]) %>%
st_as_sf(coords = c('long', 'lat'), crs = st_crs(ks)) %>%
st_filter(ks) %>% as.data.frame() %>%
cross_join(data.frame(year = as.factor(c('2014', '2015'))))
newPoints$lat <- st_coordinates(newPoints$geometry)[,2]
newPoints$long <- st_coordinates(newPoints$geometry)[,1]
#
# newPoints <- st_sample(ks, size = 1000, type = "regular") %>%
#   as(., 'Spatial') %>% as.data.frame() %>%
#     rename("long" = 'coords.x1',
#          'lat' = 'coords.x2') %>%
#   cross_join(data.frame(year = as.factor(c('2014', '2015'))))
pts.sample<- newPoints
coordinates(pts.sample) =~ long + lat
proj4string(pts.sample) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
newPoints$grass.perc <- unlist(lapply(extract(rl.nlcd.grass,pts.sample,buffer=5000),mean))*100
# Fit mod 1
newPoints$y_pred1 <- predict(m1, newPoints, type = 'response')
# m1.pred <- st_as_sf(newPoints, coords = c('long', 'lat'), crs = st_crs(ks),
#                     agr = 'constant')
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred1))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c(values = c(0, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1))+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
# Fit mod 2
newPoints$y_pred2 <- predict(m2, newPoints, type = 'response')
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred2))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c()+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
# Fit mod 3
newPoints$y_pred3 <- predict(m3, newPoints, type = 'response')
# m3.pred <- st_as_sf(newPoints, coords = c('long', 'lat'), crs = st_crs(ks),
# agr = 'constant')
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred3))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c(values = c(0, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1))+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
rmse.m1 <- rmse(df$EGA, as.numeric(predict(m1, df, type = 'response')))
mae.m1 <- mae(df$EGA, as.numeric(predict(m1, df, type = 'response')))
rmse.m2 <- rmse(df$EGA, as.numeric(predict(m2, df, type = 'response')))
mae.m2 <- mae(df$EGA, as.numeric(predict(m2, df, type = 'response')))
rmse.m3 <- rmse(df$EGA, as.numeric(predict(m3, df, type = 'response')))
mae.m3 <- mae(df$EGA, as.numeric(predict(m3, df, type = 'response')))
#m1 metrics
m1Metrics <- df %>%
ggplot()+
geom_point(aes(predict(m1, df, type = 'response'), EGA),
fill = 'purple4', color = 'black', shape = 21, size = 2,
alpha = .7)+
geom_abline(slope = 1)+
scale_y_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+  theme_bw()+
labs(title = 'm1', x = 'Predicted', y = 'Observed')+
annotate('text', label = paste0('RMSE: ', round(rmse.m1,1)), x = 700, y = 200)+
annotate('text', label = paste0('MAE: ', round(mae.m1,1)), x = 700, y = 100)+
theme(panel.grid = element_blank(),
aspect.ratio = 1,
text = element_text(size = 12)
)
#m2 metrics
m2Metrics <- df %>%
ggplot()+
geom_point(aes(predict(m2, df, type = 'response'), EGA),
fill = 'purple4', color = 'black', shape = 21, size = 2,
alpha = .7)+
geom_abline(slope = 1)+
scale_y_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+  theme_bw()+
labs(title = 'm2', x = 'Predicted', y = 'Observed')+
annotate('text', label = paste0('RMSE: ', round(rmse.m2,1)), x = 700, y = 200)+
annotate('text', label = paste0('MAE: ', round(mae.m2,1)), x = 700, y = 100)+
theme(panel.grid = element_blank(),
aspect.ratio = 1,
text = element_text(size = 12)
)
m3Metrics <- df %>%
ggplot()+
geom_point(aes(predict(m3, df, type = 'response'), EGA),
fill = 'purple4', color = 'black', shape = 21, size = 2,
alpha = .7)+
geom_abline(slope = 1)+
scale_y_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+
theme_bw()+
labs(title = 'm3', x = 'Predicted', y = 'Observed')+
annotate('text', label = paste0('RMSE: ', round(rmse.m3,1)), x = 700, y = 200)+
annotate('text', label = paste0('MAE: ', round(mae.m3,1)), x = 700, y = 100)+
theme(panel.grid = element_blank(),
aspect.ratio = 1,
text = element_text(size = 12)
)
ggarrange(m1Metrics,m2Metrics, m3Metrics, nrow = 1)
AIC(m1, m2, m3)
knitr::opts_chunk$set(echo = TRUE,
warning = F,
message = F)
library(tidyverse)
library(raster)
library(mgcv)
library(sf)
library(hydroGOF)
library(ggpubr)
set.seed(100)
df.sample <- sample(c(TRUE,FALSE), nrow(df), replace=TRUE, prob=c(0.5,0.5))
df.train <- df[df.sample,]
df.test <- df[!df.sample,]
m1 <- gam(EGA ~ grass.perc + as.factor(year) + s(long,lat, bs = "gp"),
family = poisson(link = "log"), data = df.train)
m2 <- gam(EGA ~ grass.perc + as.factor(year) + s(long,lat, bs = "gp"),
family = nb(theta = NULL,link = "log"), data = df.train)
m3 <- gam(list(EGA ~ grass.perc + as.factor(year) + s(long,lat, bs = "gp"), ~ grass.perc + s(long,lat, bs = "gp")),
family = ziplss(), data = df.train)
rmse.m1 <- rmse(df.test$EGA, as.numeric(predict(m1, df.test, type = 'response')))
mae.m1 <- mae(df.test$EGA, as.numeric(predict(m1, df.test, type = 'response')))
rmse.m2 <- rmse(df.test$EGA, as.numeric(predict(m2, df.test, type = 'response')))
mae.m2 <- mae(df.test$EGA, as.numeric(predict(m2, df.test, type = 'response')))
rmse.m3 <- rmse(df.test$EGA, as.numeric(predict(m3, df.test, type = 'response')))
mae.m3 <- mae(df.test$EGA, as.numeric(predict(m3, df.test, type = 'response')))
# Fit mod 1
newPoints$y_pred1 <- predict(m1, newPoints, type = 'response')
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred1))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c(values = c(0, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1))+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
# Fit mod 2
newPoints$y_pred2 <- predict(m2, newPoints, type = 'response')
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred2))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c()+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
# Fit mod 3
newPoints$y_pred3 <- predict(m3, newPoints, type = 'response')
# m3.pred <- st_as_sf(newPoints, coords = c('long', 'lat'), crs = st_crs(ks),
# agr = 'constant')
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred3))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c(values = c(0, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1))+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
rmse.m1 <- rmse(df.test$EGA, as.numeric(predict(m1, df.test, type = 'response')))
mae.m1 <- mae(df.test$EGA, as.numeric(predict(m1, df.test, type = 'response')))
rmse.m2 <- rmse(df.test$EGA, as.numeric(predict(m2, df.test, type = 'response')))
mae.m2 <- mae(df.test$EGA, as.numeric(predict(m2, df.test, type = 'response')))
rmse.m3 <- rmse(df.test$EGA, as.numeric(predict(m3, df.test, type = 'response')))
mae.m3 <- mae(df.test$EGA, as.numeric(predict(m3, df.test, type = 'response')))
#m1 metrics
m1Metrics <- df.test %>%
ggplot()+
geom_point(aes(predict(m1, df.test, type = 'response'), EGA),
fill = 'purple4', color = 'black', shape = 21, size = 2,
alpha = .7)+
geom_abline(slope = 1)+
scale_y_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+  theme_bw()+
labs(title = 'm1', x = 'Predicted', y = 'Observed')+
annotate('text', label = paste0('RMSE: ', round(rmse.m1,1)), x = 700, y = 200)+
annotate('text', label = paste0('MAE: ', round(mae.m1,1)), x = 700, y = 100)+
theme(panel.grid = element_blank(),
aspect.ratio = 1,
text = element_text(size = 12)
)
#m2 metrics
m2Metrics <- df.test %>%
ggplot()+
geom_point(aes(predict(m2, df.test, type = 'response'), EGA),
fill = 'purple4', color = 'black', shape = 21, size = 2,
alpha = .7)+
geom_abline(slope = 1)+
scale_y_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+  theme_bw()+
labs(title = 'm2', x = 'Predicted', y = 'Observed')+
annotate('text', label = paste0('RMSE: ', round(rmse.m2,1)), x = 700, y = 200)+
annotate('text', label = paste0('MAE: ', round(mae.m2,1)), x = 700, y = 100)+
theme(panel.grid = element_blank(),
aspect.ratio = 1,
text = element_text(size = 12)
)
m3Metrics <- df.test %>%
ggplot()+
geom_point(aes(predict(m3, df.test, type = 'response'), EGA),
fill = 'purple4', color = 'black', shape = 21, size = 2,
alpha = .7)+
geom_abline(slope = 1)+
scale_y_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000, 200))+
theme_bw()+
labs(title = 'm3', x = 'Predicted', y = 'Observed')+
annotate('text', label = paste0('RMSE: ', round(rmse.m3,1)), x = 700, y = 200)+
annotate('text', label = paste0('MAE: ', round(mae.m3,1)), x = 700, y = 100)+
theme(panel.grid = element_blank(),
aspect.ratio = 1,
text = element_text(size = 12)
)
ggarrange(m1Metrics,m2Metrics, m3Metrics, nrow = 1)
AIC(m1, m2, m3)
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred2))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c(option = 'inferno')+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred2))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c(option = 'magma')+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred2))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c(option = 'coolwarm')+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred2))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c(option = 'inferno', begin =.1)+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
ggplot()+
geom_tile(data = newPoints, aes(x = long, y = lat, fill = y_pred2))+
geom_sf(data = ks, fill = NA, color = 'black')+
scale_fill_viridis_c()+
labs(x = 'Longitude', y = 'Latitude')+
theme_bw()+
theme(axis.text.x = element_text(angle = 30))+
facet_wrap(~year, ncol = 1)
