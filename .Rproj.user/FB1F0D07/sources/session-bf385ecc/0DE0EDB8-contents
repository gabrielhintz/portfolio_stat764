# Activity 1

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      warning = F,
                      message = F)

library(tidyverse)
library(sf)
library(lubridate)
library(mgcv)
library(rpart)
library(randomForest)
library(ggmap)
library(leaflet)
library(RColorBrewer)
library(patchwork)
library(ggpubr)
```

```{r results='hide'}

url <- 'https://www.dropbox.com/scl/fi/2mufv5tlloz06k5ncwyx8/Afternoon_Walk.gpx?rlkey=6jzq31fonrs95glnfibi7lscp&dl=1'

st_layers(url)
data <- st_read(url, layer = "track_points")
```

## Plot/map your movement data. I would recommend using R and/or Google earth as I demonstrated in class.

```{r}
coords <- as.data.frame(st_coordinates(data))
coords$time <- data$time

leaflet(coords) %>% 
  addTiles(group = "OSM (default)") %>% 
  addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>% 
  addCircleMarkers(~X, ~Y, color = ~time, radius = 2, fillOpacity = .8, group = "Data Points") %>% 
  addLayersControl(
    baseGroups = c("OSM (default)", "World Imagery"),
    overlayGroups = c("Data Points"),
    options = layersControlOptions(collapsed = FALSE)
  )
```

## Explore your movement data. For example, are there any unique features of your data (e.g., a large change in location)? Do your data contain location error? Really try to explore your data as best as possible using the plots/maps you made in 3.

*The data actually is pretty good. It just had some problems in the very beginning when I was inside the building and probably the carrier service was not as good.*

```{r fig.width=10, fig.height=5}
time <- as_datetime(coords$time) - as_datetime(coords$time)[1]
ele <- data$ele

df <- data.frame(long = coords[,1], 
                 lat = coords[,2],
                 time = time,
                 ele = ele)

df %>% pivot_longer(cols = c(long,lat,ele)) %>% 
  ggplot()+
  geom_point(aes(time,value), size = 2, shape = 21, fill = 'steelblue', alpha = .8)+
  facet_wrap(~name, scales = 'free')

```

## Fit a statistical or machine learning model to your movement data. Obtain predictions of your location on a fine time scale so that the estimates resemble a continuous trajectory.

```{r results='hide'}
# Fit models polynomial regression and random forest.

# Longitude
m1_long <- lm(long ~ poly(time,degree=10,raw=TRUE),data=df)
summary(m1_long)
m2_long <- randomForest(long ~ time, data = df)
summary(m2_long)

# Latitude
m1_lat <- lm(lat ~ poly(time,degree=10,raw=TRUE),data=df)
summary(m1_lat)
m2_lat <- randomForest(lat ~ time, data = df)
summary(m2_lat)

# Elevation
m1_ele <- lm(ele ~ poly(time,degree=10,raw=TRUE),data=df)
summary(m1_lat)
m2_ele <- randomForest(ele ~ time, data = df)
summary(m2_lat)

```

## Plot/map your estimated trajectory from 5. Explore your estimated trajectory as best as possible using the plots/maps. Note any unique features or shortcomings of your model.

```{r}
df.pred = data.frame(time = seq(0,as.integer(max(df$time))))

df.pred$long.m1.hat = predict(m1_long, newdata = df.pred)
df.pred$long.m2.hat = predict(m2_long, newdata = df.pred)

df.pred$lat.m1.hat = predict(m1_lat, newdata = df.pred)
df.pred$lat.m2.hat = predict(m2_lat, newdata = df.pred)

df.pred$ele.m1.hat = predict(m1_ele, newdata = df.pred)
df.pred$ele.m2.hat = predict(m2_ele, newdata = df.pred)

p1 <- ggplot()+
  geom_point(data = df, aes(time, long), size = 3)+
  geom_line(data = df.pred, aes(time, long.m1.hat), color = "gold", size = 1)+
  geom_line(data = df.pred, aes(time, long.m2.hat), color = "red4", size = 1)

p2 <- ggplot()+
  geom_point(data = df, aes(time, lat), size = 3)+
  geom_line(data = df.pred, aes(time, lat.m1.hat), color = "gold", size = 1)+
  geom_line(data = df.pred, aes(time, lat.m2.hat), color = "red4", size = 1)

p3 <- ggplot()+
  geom_point(data = df, aes(time, ele), size = 3)+
  geom_line(data = df.pred, aes(time, ele.m1.hat), color = "gold", size = 1)+
  geom_line(data = df.pred, aes(time, ele.m2.hat), color = "red4", size = 1)


ggarrange(p1, p2, p3, nrow = 1)
```
```{r}
# Create data frame for plotting
df.pred2 <- df.pred %>% pivot_longer(cols = c(long.m1.hat,long.m2.hat), values_to = 'longitude', names_to = 'model') %>% 
  pivot_longer(cols = c(lat.m1.hat, lat.m2.hat), values_to = 'latitude', names_to = 'model2') %>% 
  mutate(model = substr(model, 6,7),
         model2 = substr(model2, 5,6)) %>% 
  filter(model == model2) %>% dplyr::select(-c(ele.m1.hat, ele.m2.hat, model2))

# Visualize models

color_palette <- colorFactor(palette = "Set1", domain = df.pred2$model)

leaflet(df.pred2) %>%
  addTiles(group = "OSM (default)") %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
  addCircleMarkers(
    ~longitude,
    ~latitude,
    fillColor = ~color_palette(model), 
    color = ~'black', # This will set the border color the same as the fill color
    radius = 3,
    weight = 1,
    fillOpacity = 0.8,
    stroke = TRUE, # Set to TRUE to have borders on the circles
    group = "Data Points"
  ) %>%
  addLayersControl(
    baseGroups = c("OSM (default)", "World Imagery"),
    overlayGroups = c("Data Points"),
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  addLegend(
    position = "bottomright",
    pal = color_palette,
    values = ~model,
    title = "Model",
    opacity = 1.0
  )
```

## Estimate a feature or quantity of interest from your estimated trajectory (e.g., velocity, residence time, number of contacts, etc)

```{r}
# Calculate speed observed data
dist <- st_distance(data$geometry[1:701], data$geometry[2:702], by_element = T)
(sum(dist)/1000)*.62 # Distance observed in km
speed <- (dist/as.numeric(diff(data$time)))*2.24
plot(df$time[-1], speed)

#Convert model coordinates to sf object
data.hat.m1 <- st_as_sf(df.pred, coords = c("long.m1.hat", "lat.m1.hat"), 
                           crs = st_crs(data))

data.hat.m2 <- st_as_sf(df.pred, coords = c("long.m2.hat", "lat.m2.hat"), 
                           crs = st_crs(data))

# Calculate speed m1
dist.hat.m1 <- st_distance(data.hat.m1$geometry[1:741], data.hat.m1$geometry[2:742], by_element = T)
(sum(dist.hat.m1)/1000)*.62 # Distance in km model 1
speed.hat.m1 <- (dist.hat.m1/as.numeric(diff(data.hat.m1$time)))*2.24
plot(data.hat.m1$time[-1], speed.hat.m1,xlab="Time (seconds)",ylab="Velocity (miles per hour)", main = 'Polynomial regression')

# Calculate speed m2
dist.hat.m2 <- st_distance(data.hat.m2$geometry[1:741], data.hat.m2$geometry[2:742], by_element = T)
(sum(dist.hat.m2)/1000)*.62 # Distance in km model 2
speed.hat.m2 <- (dist.hat.m2/as.numeric(diff(data.hat.m2$time)))*2.24
plot(data.hat.m2$time[-1], speed.hat.m2,xlab="Time (seconds)",ylab="Velocity (miles per hour)", main = 'Random Forest')
```


